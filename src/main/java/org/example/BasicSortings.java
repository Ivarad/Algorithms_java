package org.example;

import java.util.Scanner;

public class BasicSortings { // Класс сортировок
    // ------------- Функции и методы для работы с массивами ------------- //
    private int[] GetArray() { // Фукнция, которая позволяет наполнить массив пользовательскими данными
        Scanner input = new Scanner(System.in); // Объявляем и инициализируем сканер, необходимый для получения введенных пользователем данных
        int[] array = new int[0]; // Объявляем и инициализируем массив

        System.out.println("Enter array size:");

        if (input.hasNextInt()) { // Проверим, является ли введеное пользователем значение числом
            array = new int[input.nextInt()]; // Задаем длину массива, которую ввел пользователь
        } else {
            System.out.println("Incorrect value!");
            return array; // В случае если, введенное значение некорректно, завершаем фукнцию возвратом пустого массива
        }

        System.out.println("Enter array values:");

        for (int i = 0; i < array.length; ) { // Цикл, в котором массив наполняется введенными значениями
            input.nextLine(); // Переходим на следующее значение для сканера, это необходимо, для предотвращения бесконечного цикла, который возникнет, при некорректном вводе значения пользователем
            if (input.hasNextInt()) { // Проверка, является ли введеное значение числом
                array[i] = input.nextInt(); // Добавляем значение в массив
                i++; // Инкрементируем счетчик
            } else {
                System.out.println("Incorrect value!");
            }
        }
        System.out.println("You input this array:");

        ShowArray(array); // Функция вывода значений массива

        return array; // Конец функции, возвращаем массив
    }

    private void ShowArray(int[] array) { // Фукнция вывода значений массива
        for (int element : array) { // Цикл который выведет итог сортировки
            System.out.printf("%d ", element);
        }
    }

    // ------------- Сортировка пузырьком ------------- //

    public boolean SortBubble() { // Функция сортировки пузырьком

        boolean isSorted = false; // Булевая переменная, которая поможет определить, отсортирован ли массив
        int[] numbersArray = GetArray(); // Объявлем и инициализируем int массив, с помощью функции для приема пользовательских значений

        if (numbersArray.length == 0)
            return false; // Проверка длины массива, если ее значение 0, прервем функцию, так как сортировать нечего

        while (!isSorted) { // Цикл, который закончится, только в том случае, если все значения в массиве будут отсортированы
            isSorted = true; // Меняем значение переменной, отвечающей за итеррации цикла сортировки, в случае если массив будет сразу отсортирован, цикл завершится
            for (int i = 0; i < numbersArray.length - 1; ++i) { // Идем по массиву
                if (numbersArray[i] > numbersArray[i + 1]) { // Проверяем, является ли текущее значение массива больше другого
                    // *Далее будет использоваться swap алгоритм
                    numbersArray[i + 1] = numbersArray[i] + numbersArray[i + 1]; // Присвоим значение следующему элементу, которое будет суммой его и текущего элемента
                    numbersArray[i] = numbersArray[i + 1] - numbersArray[i]; // Теперь присвоим значение текущему элементу, которое будет разностью следующего и его самого соответственно, таким образом в текущий элемент попадет значение следующего
                    numbersArray[i + 1] = numbersArray[i + 1] - numbersArray[i]; // Присваиваем следующему элементу, разность его и текущего, вследствии чего, мы меняем их значения местами

                    isSorted = false; // Так как порядок в массиве изменился, мы не знаем, стал ли он отсортированным, поэтому присваиваем значение переменной, отвечающей за иттерацию цикла, дабы повторить его
                }
            }
        }

        System.out.println("\nSorted array: ");
        ShowArray(numbersArray); // Функция для вывода значений массива

        return true; // Конец функции, возвращаем значение, соответствующее успешной сортировке
    }

    // ------------- Сортировка выбором ------------- //
    public boolean SortSelection() { // Функция сортировки выбором

        int[] numbersArray = GetArray(); // Объявлем и инициализируем int массив, с помощью функции для приема пользовательских значений
        int maxIndex = numbersArray.length; // Объявляем и инициализируем максимальный индекс
        int minIndex = 0; // Объявляем и инициализируем минимальный индекс
        int buffer; // // Объявляем буферную переменную

        if (numbersArray.length == 0)
            return false; // Проверка длины массива, если ее значение 0, прервем функцию, так как сортировать нечего


        for (int i = 0; i < numbersArray.length; i++) { // Цикл который пройдет по массиву
            minIndex = findMinIndex(numbersArray, maxIndex); // Присваиваем значение переменной с минимальным индексом, за счет вызовав функции, которая ищет соответсвующий индекс

            // *Осуществляем swap с буферной переменной
            buffer = numbersArray[maxIndex - 1];
            numbersArray[maxIndex - 1] = numbersArray[minIndex];
            numbersArray[minIndex] = buffer;

            maxIndex--; // Уменьшаем последний индекс
        }

        System.out.println("\nSorted array: ");
        ShowArray(numbersArray); // Функция для вывода значений массива

        return true; // Конец функции, возвращаем значение, соответствующее успешной сортировке
    }

    private int findMinIndex(int[] array, int maxIndex) { // Функция осуществляющая поиск индекса от ячейки в определенном диапазоне, которая содержит наивысшее значение
        int minIndex = 0; // Начальный индекс
        for (int i = 0; i < maxIndex; i++) { // Цикл который пройдется в заданном диапазоне по массиву
            if (array[minIndex] < array[i]) { // Проверка, является ли текущая ячейка с начальным индексом меньше текущего элемента
                minIndex = i; // Присваиваем значение, индекса, ячейка которого содержит наивысшее значение
            }
        }
        return minIndex; // Конец функции, возвращаем индекс, с нужной ячейкой
    }
}
